"use client";
// app/field-detail/[id]/page.tsx or pages/field-detail/[id].js
import { use, useEffect, useState } from "react";
import styles from "@/styles/pages/FieldDetail.module.css";
import CustomInput from "@/components/ui/CustomInput";
import CustomButton from "@/components/ui/CustomButton";
import fieldImage from "@/public/img/field.jpg";
import Image from "next/image";
import { useGetFieldById } from "@/lib/api/fieldApi";
import { formatToVND } from "@/utils/FormatVnd";
import { Loading } from "@/utils/Loading";
import Map from "@/components/map/Map";
import TimeRangePicker from "@/components/ui/TimeRangePicker";
import {
  useCheckEventField,
  useGetEventFieldByFieldId,
  useBookingEventField,
} from "@/lib/api/eventFieldApi";
import { showConfirm, showError, showSuccess } from "@/utils/CustomAlert";
import { formatTime } from "@/utils/FormatTime";

const fakeField = {
  name: "S√¢n b√≥ng C·ª≠u Long",
  phone: "0917176384",
  address: "ƒê∆∞·ªùng Th√¨ Th∆°m, ·∫§p B√¨nh Phong, T√¢n M·ªπ Ch√°nh, M·ªπ Tho, Ti·ªÅn Giang",
  image: "/images/field1.jpg",
  description:
    "S√¢n b√≥ng C·ª≠u Long l√† m·ªôt trong nh·ªØng s√¢n b√≥ng ƒë·∫πp nh·∫•t khu v·ª±c, v·ªõi m·∫∑t c·ªè ch·∫•t l∆∞·ª£ng cao, h·ªá th·ªëng ƒë√®n chi·∫øu s√°ng hi·ªán ƒë·∫°i, v√† kh√¥ng gian tho√°ng ƒë√£ng. S√¢n ph√π h·ª£p cho c√°c tr·∫≠n ƒë·∫•u giao l∆∞u, luy·ªán t·∫≠p, ho·∫∑c t·ªï ch·ª©c gi·∫£i ƒë·∫•u.",
  amenities: [
    "C·ªè nh√¢n t·∫°o ch·∫•t l∆∞·ª£ng cao",
    "Ph√≤ng thay ƒë·ªì",
    "B√£i ƒë·ªó xe mi·ªÖn ph√≠",
    "Qu√°n n∆∞·ªõc",
    "ƒê√®n chi·∫øu s√°ng",
  ],
  price: "500,000 VNƒê/gi·ªù",
  gallery: ["/images/field1.jpg", "/images/field2.jpg", "/images/field3.jpg"],
};

export default function FieldDetail({
  params,
}: {
  params: Promise<{ id: string }>;
}) {
  const { id } = use(params);
  const [bookingDate, setBookingDate] = useState("");
  const [startBookingTime, setStartBookingTime] = useState("");
  const [endBookingTime, setEndBookingTime] = useState("");

  const { data: field, isLoading, error } = useGetFieldById(id);

  const {
    data: eventField,
    isLoading: isLoadingEventField,
    error: errorEventField,
  } = useGetEventFieldByFieldId(id, bookingDate);

  const handleCheckBooking = async () => {
    try {
      const response = await useCheckEventField({
        SanID: id,
        Ngay: bookingDate,
        GioBatDau: formatTime(startBookingTime),
        GioKetThuc: formatTime(endBookingTime),
      });
      if (response.status === 200) {
        showConfirm({
          title: "ƒê·∫∑t s√¢n",
          text: "L·ªãch tr·ªëng , b·∫°n c√≥ mu·ªën ƒë·∫∑t kh√¥ng ?",
        }).then(async (result: any) => {
          if (result.isConfirmed) {
            const response = await useBookingEventField({
              SanID: id,
              Ngay: bookingDate,
              GioBatDau: startBookingTime,
              GioKetThuc: endBookingTime,
            });
            if (response.status === 200) {
              showSuccess({ title: "ƒê·∫∑t s√¢n", text: "ƒê·∫∑t s√¢n th√†nh c√¥ng" });
            }
          }
        });
      }
    } catch (error: any) {
      showError({ title: "ƒê·∫∑t s√¢n", text: error });
    }
  };

  const handleChangeDate = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;

    if (!value) {
      setStartBookingTime("");
      setEndBookingTime("");
      return;
    }

    try {
      const { GioBatDau, GioKetThuc } = JSON.parse(value);
      setStartBookingTime(GioBatDau);
      setEndBookingTime(GioKetThuc);
    } catch (error) {
      console.log(error);
    }
  };

  if (isLoading) return <Loading loading={isLoading} />;

  return (
    <div className={styles.page}>
      {/* Hero Section */}
      <section className={styles.hero}>
        <Image
          src={fieldImage}
          alt={field.TenSan}
          className={styles.heroImage}
        />
        <div className={styles.heroOverlay}>
          <h1 className={styles.heroTitle}>{field.TenSan}</h1>
          <p className={styles.heroSubtitle}>
            <span className={styles.icon}>üìç</span> {field.ViTri}
          </p>
        </div>
      </section>

      {/* Main Content */}
      <div className={styles.container}>
        <main className={styles.main}>
          {/* Field Info */}
          <section className={styles.infoSection}>
            <h2 className={styles.sectionTitle}>Th√¥ng tin s√¢n</h2>
            <p className={styles.description}>{field.MoTa}</p>
            <div className={styles.infoDetails}>
              <p className={styles.infoItem}>
                <span className={styles.icon}>üìû</span>{" "}
                {field.nguoidung.DienThoai}
              </p>
              <p className={styles.infoItem}>
                <span className={styles.icon}>üí∞</span> {formatToVND(field.Gia)}
              </p>
            </div>
            <h3 className={styles.subTitle}>Ti·ªán √≠ch</h3>
            <ul className={styles.amenities}>
              {fakeField.amenities.map((amenity, index) => (
                <li key={index} className={styles.amenityItem}>
                  <span className={styles.checkIcon}>‚úî</span> {amenity}
                </li>
              ))}
            </ul>
          </section>

          {/* Map Placeholder */}
          <section className={styles.mapSection}>
            <h2 className={styles.sectionTitle}>V·ªã tr√≠</h2>
            <div className={styles.mapPlaceholder}>
              {/* <Map address={field.ViTri} /> */}
            </div>
          </section>

          {/* Gallery */}
          <section className={styles.gallerySection}>
            <h2 className={styles.sectionTitle}>H√¨nh ·∫£nh s√¢n</h2>
            <div className={styles.gallery}>
              {/* {JSON.parse(field.HinhAnh).map((image: string, index: number) => (
                <Image
                  key={index}
                  src={image}
                  width={300}
                  height={300}
                  priority
                  alt={`Gallery image ${index + 1}`}
                  className={styles.galleryImage}
                />
              ))} */}
            </div>
          </section>
        </main>

        {/* Booking Sidebar */}
        <aside className={styles.sidebar}>
          <h2 className={styles.sidebarTitle}>ƒê·∫∑t s√¢n</h2>
          <div className={styles.bookingForm}>
            <h2>Ng√†y:</h2>
            <CustomInput
              type="date"
              value={bookingDate}
              onChange={(e) => setBookingDate(e.target.value)}
              className={styles.input}
            />
            <h2>L·ªãch s√¢n:</h2>
            {isLoadingEventField ? (
              <Loading loading={isLoadingEventField} />
            ) : eventField && eventField.length > 0 ? (
              <select onChange={handleChangeDate}>
                <option value="">-- Ch·ªçn l·ªãch s√¢n --</option>
                {eventField.map((event: any, index: number) => (
                  <option
                    key={index}
                    value={JSON.stringify({
                      GioBatDau: event.GioBatDau,
                      GioKetThuc: event.GioKetThuc,
                    })}
                  >
                    {event.GioBatDau} - {event.GioKetThuc}
                  </option>
                ))}
              </select>
            ) : (
              bookingDate && <p>Kh√¥ng c√≥ l·ªãch ng√†y {bookingDate}</p>
            )}
            <CustomButton
              text="ƒê·∫∑t ngay"
              onClick={handleCheckBooking}
              className={styles.bookButton}
            />
          </div>
        </aside>
      </div>
    </div>
  );
}
